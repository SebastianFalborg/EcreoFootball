@inject IConfiguration Configuration
@inject NavigationManager Navigation

<div class="input-group mb-4">
    <span class="input-group-text">Blue Team</span>
    <select class="form-control" size="5" multiple @onchange="SelectBlueTeam">
        @foreach (var player in Players)
        {
            <option value="@player.Id">@player.Name</option>
        }
    </select>
</div>

<div class="input-group mb-4">
    <span class="input-group-text">Blue Team Score</span>
    <BSInput InputType="InputType.Number" @bind-Value="BlueTeamScore" min="0" />
</div>

<div class="input-group mb-4">
    <span class="input-group-text">Red Team</span>
    <select class="form-control" size="5" multiple @onchange="SelectRedTeam">
        @foreach (var player in Players)
        {
            <option value="@player.Id">@player.Name</option>
        }
    </select>
</div>

<div class="input-group mb-4">
    <span class="input-group-text">Red Team Score</span>
    <BSInput InputType="InputType.Number" @bind-Value="RedTeamScore" min="0" />
</div>

<div class="input-group mb-4">
    <span class="input-group-text">Match Date and Time</span>
    <BSInput InputType="InputType.DateTimeLocal" @bind-Value="MatchDateTime"/>
</div>

<button class="btn btn-primary" @onclick="CreateMatch" disabled="@(SelectedBlueTeam.Count < 2 && SelectedRedTeam.Count < 2 || (BlueTeamScore == 0 && RedTeamScore == 0))">Create Match</button>

@code {
    private IEnumerable<Player> Players { get; set; } = new List<Player>();
    private List<Player> SelectedBlueTeam { get; set; } = new();
    private int BlueTeamScore { get; set; }
    private List<Player> SelectedRedTeam { get; set; } = new();
    private int RedTeamScore { get; set; }
    private DateTime MatchDateTime { get; set; } = DateTime.Now;

    private Client? client = null;

    protected override async Task OnInitializedAsync()
    {
        var webApiBaseAddress = Configuration["webApiBaseAddress"] ?? string.Empty;
        client = new Client(webApiBaseAddress, new HttpClient());
        Players = await client.GetPlayersAsync();
    }

    private void CreateMatch()
    {
        var newMatch = new Match
        {
            BlueTeam = SelectedBlueTeam.Select(x => x),
            RedTeam = SelectedRedTeam.Select(x => x),
            BlueScore = BlueTeamScore,
            RedScore = RedTeamScore,
            Timestamp = MatchDateTime
        };

        client?.CreateMatchAsync(newMatch);
        
        Navigation.NavigateTo("", true);
    }
    
    private void SelectBlueTeam(ChangeEventArgs e)
    {
        if (e.Value == null)
        {
            return;
        }
        
        var selectedPlayerIds = (e.Value as IEnumerable<string>)?.ToList();
        SelectedBlueTeam = Players.Where(p => selectedPlayerIds.Contains(p.Id)).ToList();
    }

    private void SelectRedTeam(ChangeEventArgs e)
    {
        if (e.Value == null)
        {
            return;
        }
        
        var selectedPlayerIds = (e.Value as IEnumerable<string>)?.ToList();
        SelectedRedTeam = Players.Where(p => selectedPlayerIds.Contains(p.Id)).ToList();
    }
}