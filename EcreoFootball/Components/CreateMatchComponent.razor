@inject IConfiguration Configuration
@inject NavigationManager Navigation

<h3>Create New Match</h3>

<div class="form-group">
    <label>Blue Team</label>
    @for (var i = 0; i < SelectedBlueTeam.Count + 1; i++)
    {
        <select class="form-control" style="margin-bottom: 5px;" @onchange="(e) => SelectBlueTeamPlayer(e, i)">
            <option value="">Select player</option>
            @foreach (var player in Players)
            {
                <option value="@player.Id" selected="@(SelectedBlueTeam.Count > i && SelectedBlueTeam[i].Id == player.Id)">@player.Name</option>
            }
        </select>
    }
</div>

<div class="form-group">
    <label>Blue Team Score</label>
    <input type="number" class="form-control" @bind="BlueTeamScore" min="0" />
</div>

<div class="form-group">
    <label>Red Team</label>
    @for (var i = 0; i < SelectedRedTeam.Count + 1; i++)
    {
        <select class="form-control" style="margin-bottom: 5px;" @onchange="(e) => SelectRedTeamPlayer(e, i)">
            <option value="">Select player</option>
            @foreach (var player in Players)
            {
                <option value="@player.Id" selected="@(SelectedRedTeam.Count > i && SelectedRedTeam[i].Id == player.Id)">@player.Name</option>
            }
        </select>
    }
</div>

<div class="form-group">
    <label>Red Team Score</label>
    <input type="number" class="form-control" @bind="RedTeamScore" min="0" />
</div>

<div class="form-group">
    <label>Match Date and Time</label>
    <input type="datetime-local" class="form-control" @bind="MatchDateTime"/>
</div>

<button class="btn btn-primary" @onclick="CreateMatch" disabled="@(SelectedBlueTeam.Count < 2 || SelectedRedTeam.Count < 2 || (BlueTeamScore == 0 && RedTeamScore == 0))">Create Match</button>

@code {
    private IEnumerable<Player> Players { get; set; } = new List<Player>();
    private List<Player> SelectedBlueTeam { get; } = new();
    private int BlueTeamScore { get; set; }
    private List<Player> SelectedRedTeam { get; } = new();
    private int RedTeamScore { get; set; }
    private DateTime MatchDateTime { get; set; } = DateTime.Now;

    private Client? client = null;

    protected override async Task OnInitializedAsync()
    {
        var webApiBaseAddress = Configuration["webApiBaseAddress"] ?? string.Empty;
        client = new Client(webApiBaseAddress, new HttpClient());
        Players = await client.GetPlayersAsync();
    }

    private void CreateMatch()
    {
        var newMatch = new Match
        {
            BlueTeam = SelectedBlueTeam.Select(x => x.Id),
            RedTeam = SelectedRedTeam.Select(x => x.Id),
            BlueScore = BlueTeamScore,
            RedScore = RedTeamScore,
            Timestamp = MatchDateTime
        };

        client?.CreateMatchAsync(newMatch);
        
        Navigation.NavigateTo("", true);
    }
    
    private void SelectBlueTeamPlayer(ChangeEventArgs e, int index)
    {
        var playerId = e.Value?.ToString();
        var player = Players.FirstOrDefault(p => p.Id == playerId);

        if (player != null)
        {
            if (index < SelectedBlueTeam.Count)
            {
                SelectedBlueTeam[index] = player;
            }
            else
            {
                SelectedBlueTeam.Add(player);
            }
        }
    }

    private void SelectRedTeamPlayer(ChangeEventArgs e, int index)
    {
        var playerId = e.Value?.ToString();
        var player = Players.FirstOrDefault(p => p.Id == playerId);

        if (player != null)
        {
            if (index < SelectedRedTeam.Count)
            {
                SelectedRedTeam[index] = player;
            }
            else
            {
                SelectedRedTeam.Add(player);
            }
        }
    }
}