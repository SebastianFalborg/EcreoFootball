@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject IConfiguration Configuration
@inject NavigationManager Navigation

<BSContainer>
    <BSRow>
        <h1>Ecreo Football</h1>
        <BSCol>
            <h2>Spillere</h2>
            <div class="d-flex flex-wrap">
              @foreach (var player in _players)
              {
                  <BSCard CardType="CardType.Card" class="m-2" style="width: 12rem;">
                      <BSCard CardType="CardType.Body">
                          <BSCard CardType="CardType.Title">@player.Name</BSCard>
                          <BSCard CardType="CardType.Text">
                              <p>
                                  <b>Rating</b>
                              </p>
                              @player.Rating.ToString("N1")
                          </BSCard>
                          <BSButton OnClick="@(() => Navigation.NavigateTo($"/player/{player.Id}"))" Color="BSColor.Primary">Profil</BSButton>
                      </BSCard>
                  </BSCard>
              }
            </div>

        </BSCol>
        <BSCol>
            <h2>Tilføj spil</h2>
            <CreateMatchComponent/>
        </BSCol>
    </BSRow>
    <BSRow>
        <h2>Spil</h2>
        @foreach (var match in _matches)
        {
            <MatchComponent Match="match"></MatchComponent>
        }
    </BSRow>
</BSContainer>

@code
{
    private HubConnection? _hubConnection;
    private List<MatchDto> _matches = new();
    private List<Player> _players = new();

    protected override async Task OnInitializedAsync()
    {
        var webApiBaseAddress = Configuration["webApiBaseAddress"] ?? string.Empty;
        var client = new Client(webApiBaseAddress, new HttpClient());
        _matches = (await client.GetMatchesAsync()).ToList();
        _players = (await client.GetPlayersAsync(orderByRating: true)).ToList();
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"{webApiBaseAddress}matchhub")
            .Build();
            
        _hubConnection.On<MatchDto>("ReceiveNewMatch", (match) =>
        {
            _matches.Insert(0, match);
            StateHasChanged();
            return Task.CompletedTask;
        });
    
        await _hubConnection.StartAsync();
    }
}